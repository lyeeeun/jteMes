<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jin.mes.form.item.itemStockMgt.ItemStockMgtMapper">

	<!-- 자재 관리정보 -->
	<sql id="itemMgt_base">
			itemMgt.item_id AS itemId,
			itemMgt.item_mgt_id AS itemMgtId,
			itemMgt.item_mgt_type AS itemMgtType,
			itemMgt.item_mfg_date AS itemMfgDate,
			itemMgt.item_stock AS itemStock,
			itemMgt.item_package_stock AS itemPackageStock,
			itemMgt.description,
			itemMgt.created_at AS createdAt,
			itemMgt.creator_id AS creatorId,
			itemMgt.updated_at AS updatedAt,
			itemMgt.updator_id AS updatorId,
			itemMgt.is_del as isDel,
			itemInfo.item_nm AS itemNm,
			itemInfo.item_type AS itemType,
			itemInfo.item_price AS itemPrice,
			itemInfo.item_person_cost AS itemPersonCost,
			itemInfo.item_std01 AS itemStd01,
			itemInfo.item_std02 AS itemStd02,
			itemInfo.item_std03 AS itemStd03,
			itemInfo.item_std04 AS itemStd04,
			itemInfo.item_std05 AS itemStd05,
			itemInfo.item_std_str01 as itemStdStr01,
			itemInfo.item_std_str02 as itemStdStr02,
			itemInfo.item_std_str03 as itemStdStr03,
			itemInfo.item_std_str04 as itemStdStr04,
			itemInfo.item_std_str05 as itemStdStr05,
			itemInfo.item_unit AS itemUnit,
			itemInfo.item_mtrl AS itemMtrl,
			itemInfo.item_total_stock AS itemTotalStock,
			itemInfo.item_day_target AS itemDayTarget,
			itemInfo.item_deduction AS itemDeduction,
			itemInfo.description AS itemDesc
		FROM bc_item_info itemInfo
		RIGHT JOIN cm_item_mgt itemMgt
		ON itemInfo.item_id = itemMgt.item_id
		WHERE itemInfo.is_use = TRUE
		<if test="searchText != null and searchText != '' ">
			AND ${searchGubun} LIKE CONCAT('%',#{searchText},'%')
		</if>
		<if test="itemId != null">
			AND itemMgt.item_id = #{itemId} 
		</if>
		<if test="itemMgtId != null">
			AND itemMgt.item_mgt_id = #{itemMgtId}
		</if>
		<if test="isDel != null">
			AND itemMgt.is_del = #{isDel}
		</if>
	</sql>
	
	<!-- 자재정보(Page) select -->
	<select id="selectItemStockList"
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto"
		resultType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		SELECT * FROM (
				SELECT 
					<choose>
						<when test="sort != null and sort != '' ">
							ROW_NUMBER() OVER(ORDER BY ${sort}) AS RNUM,
						</when>
						<otherwise>
							ROW_NUMBER() OVER(ORDER BY updatedAt desc) AS RNUM,
						</otherwise>
					</choose>
					<include refid="itemMgt_base" />
				)s_table
				WHERE RNUM <![CDATA[ >= ]]> #{firstIndex} AND RNUM <![CDATA[ <= ]]> #{lastIndex}
	</select>
	
	<!-- 자재정보(Page) select -->
	<select id="selectStockList"
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto"
		resultType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		SELECT
					<include refid="itemMgt_base" />
	</select>
	
	<!-- 자재정보 Count -->
	<select id="rowCount"
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto"
		resultType="java.lang.Integer">
				SELECT count(*) 
				FROM (
					SELECT
					<include refid="itemMgt_base" />
				)c_table
	</select>
	
	
	<sql id="item_stock_history">
			itemMgtId,
			itemQtyTarget,
			itemQtyTargetCode,
			itemQtyTotal,
			itemQtyDesc,	
			itemQtyPgCd,
			itemQtyDate,
			itemQtyUser,
			itemQtyUserNm
		FROM (
								-- 제조 완료(생산)
			SELECT 
				qmItem.item_mgt_id				AS itemMgtId,			-- 개별 품목 코드
				qmItem.item_qty_target 			AS itemQtyTarget,		-- 업무 구불
				qmItem.item_qty_target_code		AS itemQtyTargetCode,	-- 업무 코드 
				qmItem.item_qty_total			AS itemQtyTotal,		-- 수량
				'제조 완료'							AS itemQtyDesc,			-- 비고
				qmItem.item_mgt_id				AS itemQtyPgCd,			
				qmItem.item_qty_date			AS itemQtyDate,			-- 제조 완료 일자 
				workInfo.prod_work_user			AS itemQtyUser,			-- 작업자(등록자)
				urInfo.user_nm					AS itemQtyUserNm		-- 작업자 이름
			FROM qm_item_mgt qmItem
			INNER JOIN prs_work_info workInfo ON qmItem.item_qty_target_code = workInfo.prod_work_id
			LEFT OUTER JOIN mb_user_info urInfo ON workInfo.prod_work_user = urInfo.user_id
			WHERE 1=1
			AND item_qty_target = 'prod_tagt01' 
			AND item_id = #{itemId}
			AND item_mgt_id = #{itemMgtId}
			
			UNION
							-- 관리자(수동입력)
			SELECT 
				qmItem.item_mgt_id				AS itemMgtId,			-- 개별 품목 코드
				qmItem.item_qty_target 			AS itemQtyTarget,		-- 업무 구불
				qmItem.item_qty_target_code		AS itemQtyTargetCode,	-- 업무 코드 
				qmItem.item_qty_total			AS itemQtyTotal,		-- 수량
				manual.manual_desc				AS itemQtyDesc,			-- 비고(관리자)
				''								AS itemQtyPgCd,			
				qmItem.item_qty_date			AS itemQtyDate,			-- 제조 완료 일자 
				manual.manual_user				AS itemQtyUser,			-- 수동입력 대상자
				urInfo.user_nm					AS itemQtyUserNm		-- 수동입력 대상자 이름
			FROM qm_item_mgt qmItem
			INNER JOIN qm_manual_info manual
			ON qmItem.item_qty_target_code = manual.manual_id
			LEFT OUTER JOIN mb_user_info urInfo ON urInfo.user_id = manual.manual_user
			WHERE 1=1
			AND qmItem.item_id = #{itemId}
			AND qmItem.item_mgt_id = #{itemMgtId}
			
			UNION
							-- 불량(출하 검사)		
			SELECT 
				DISTINCT
				qmItem.item_mgt_id				AS itemMgtId,			-- 개별 품목 코드
				qmItem.item_qty_target 			AS itemQtyTarget,		-- 업무 구불
				qmItem.item_qty_target_code		AS itemQtyTargetCode,	-- 업무 코드 
				qmItem.item_qty_total			AS itemQtyTotal,		-- 수량
				badItem.bad_desc				AS itemDesc,			-- 비고
				badItem.bad_target_code			AS itemQtyPgCd,			-- 작업 코드(작업, 출하)
				badItem.chk_date				AS itemQtyDate,			-- 검사일
				badItem.chk_user				AS itemQtyUser,			-- 검사자
				urInfo.user_nm					AS itemQtyUserNm		-- 검사자 이름
			FROM qm_item_mgt qmItem
			INNER JOIN prs_bad_product badItem
			ON qmItem.item_qty_target_code = badItem.bad_target_code OR qmItem.item_qty_target_code = badItem.bad_id
			LEFT OUTER JOIN mb_user_info urInfo ON urInfo.user_id = badItem.chk_user
			WHERE 1=1
			AND badItem.bad_target != 'qual_spec03'
			AND qmItem.item_id = #{itemId}
			AND qmItem.item_mgt_id = #{itemMgtId}
			
			UNION
							-- 포장(출고) -> 포장 수량으로 전환
			SELECT 
				qmItem.item_mgt_id 			AS itemMgtId,
				qmItem.item_qty_target 			AS itemQtyTarget,
				qmItem.item_qty_target_code		AS itemQtyTargetCode,
				qmItem.item_qty_total			AS itemQtyTotal,
				rlesMgt.rles_mgt_desc			AS itemQtyDesc,
				rlesMgt.rles_mgt_id				AS itemQtyPgCd,
				qmItem.item_qty_date			AS itemQtyDate,
				rlesMgt.rles_worker			AS rlesWorker,
				userInfo.user_nm			AS itemQtyUserNm
			FROM qm_item_mgt qmItem
			INNER JOIN prs_rles_mgt rlesMgt ON qmItem.item_qty_target_code = rlesMgt.rles_mgt_id
			INNER JOIN mb_user_info	userInfo ON rlesMgt.rles_worker = userInfo.user_id
			WHERE 1=1
			AND qmItem.item_id = #{itemId}
			AND qmItem.item_mgt_id = #{itemMgtId}
		)u_table
		WHERE 1=1
		<if test="searchText != null and searchText != '' ">
			AND ${searchGubun} LIKE CONCAT('%',#{searchText},'%')
		</if>
	</sql>
	
	<insert id="insertItemMgtStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		INSERT INTO cm_item_mgt(
			item_id,
			item_mgt_id,
			item_mgt_type,
			item_mfg_date,
			item_stock,
			description,
			creator_id,
			created_at,
			updator_id,
			updated_at,
			is_del
		) VALUES(
			#{itemId},
			#{itemMgtId},
			#{itemMgtType},
			#{itemMfgDate},
			#{itemStock},
			#{description},
			#{creatorId},
			NOW(),
			#{updatorId},
			NOW(),
			FALSE
		)
	</insert>
	
	
	<select id="selectItemStockHistory"
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto"
		resultType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		SELECT * FROM (
			SELECT 
				<choose>
					<when test="sort != null and sort != '' ">
						ROW_NUMBER() OVER(ORDER BY ${sort}) AS RNUM,
					</when>
					<otherwise>
						ROW_NUMBER() OVER(ORDER BY itemQtyDate desc) AS RNUM,
					</otherwise>
				</choose>
				<include refid="item_stock_history" />
			)s_table
		WHERE RNUM <![CDATA[ >= ]]> #{firstIndex} AND RNUM <![CDATA[ <= ]]> #{lastIndex}
	</select>

	<select id="itemStockHistoryCount"
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto"
		resultType="java.lang.Integer">
				SELECT count(*) 
				FROM (
					SELECT
					<include refid="item_stock_history" />
				)c_table
	</select>
	
	
	<!-- 개별 품목 재고 수동 입력(관리자) -->
	<insert id="insertManualInfo" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
	<selectKey keyProperty="itemQtyTargetCode" resultType="java.lang.String" order="BEFORE">
		SELECT CREATE_PK('MANUAL') AS itemQtyTargetCode
	</selectKey>
		INSERT INTO qm_manual_info(
			manual_id,
			manual_cnt,
			manual_at,
			manual_user,
			creator_id,
			created_at,
			updator_id,
			updated_at,
			manual_desc,
			lot_id
		) VALUES(
			#{itemQtyTargetCode},
			#{itemQtyTotal},
			#{itemQtyDate},
			#{itemQtyUser},
			#{creatorId},
			NOW(),
			#{updatorId},
			NOW(),
			#{itemQtyDesc},
			#{itemQtyPgCd}
		)
	</insert>
	
	<!-- 개별 품목 수량 등록 -->
	<insert id="insertItemStockHistory" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		INSERT INTO qm_item_mgt(
			item_id,
			item_mgt_id,
			item_qty_user,
			item_qty_target,
			item_qty_target_code,
			item_qty_total,
			item_qty_date
		) VALUES(
			#{itemId},
			#{itemMgtId},
			#{itemQtyUser},
			#{itemQtyTarget},
			#{itemQtyTargetCode},
			#{itemQtyTotal},
			NOW()
		)
	</insert>
	
	<!-- 개별 품목 재고 집계 -->
	<select id="selectItemStock" 
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto" resultType="int">
		SELECT 
			IFNULL(SUM(item_qty_total),0) AS itemQtyTotal 
		FROM qm_item_mgt
		WHERE 1=1
		AND item_mgt_id = #{itemMgtId}
		AND item_id = #{itemId}
	</select>
	
	<!-- 개별 품목 정보 수정 -->
	<update id="updateItemMgtStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		UPDATE cm_item_mgt
		
		SET 
			<if test="updatorId != null">	
				updator_id = #{updatorId},	
			</if>
			updated_at = NOW()
			<if test="itemMgtType != null">	
				,item_mgt_type = #{itemMgtType}
			</if>
			<if test="itemMfgDate != null">	
				,item_mfg_date = #{itemMfgDate}
			</if>
			<if test="itemStock != null">	
				,item_stock = #{itemStock}
			</if>
			<if test="description != null">	
				,description = #{description}
			</if>
		WHERE item_mgt_id = #{itemMgtId}
		AND item_id = #{itemId}
	</update>
	
		<!-- 개별 품목 정보 수정 -->
	<update id="updateItemStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		UPDATE cm_item_mgt
		SET 
			<if test="updatorId != null">	
				updator_id = #{updatorId},	
			</if>
			updated_at = NOW()
			<if test="itemStock != null">	
				,item_stock = #{itemStock}
			</if>
			<if test="description != null">	
				,description = #{description}
			</if>
		WHERE item_mgt_id = #{itemMgtId}
		AND item_id = #{itemId}
	</update>
	
	<delete id="deleteItemStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		DELETE FROM cm_item_mgt
		WHERE 1=1
		AND item_mgt_id = #{itemMgtId}
	</delete>
	
	<!-- 품목 총 재고량 집계 -->
	<select id="selectItemTotalStock" 
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto" resultType="int">
		SELECT 
			IFNULL(SUM(item_stock),0) AS itemTotalStock 
		FROM cm_item_mgt
		WHERE 1=1
		AND item_id = #{itemId}
	</select>
	
	<!-- 품목 총 수량 수정 -->
	<update id="updateItemTotalStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		UPDATE bc_item_info
		SET 
			<if test="itemTotalStock != null">	
				item_total_stock = #{itemTotalStock}
			</if>
		WHERE item_id = #{itemId}
	</update>
	
	<update id="updateTargetStock" parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		UPDATE qm_item_mgt
		SET
			<if test="itemQtyTotal != null">
				item_qty_total = #{itemQtyTotal}
			</if>
		WHERE item_qty_target_code = #{itemQtyTargetCode}	
	</update>
	
	<!-- 불량 품목 이력 삭제(불량품 관리 삭제 후) -->
	<delete id="deleteTargetStock" 
		parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		DELETE FROM qm_item_mgt
		WHERE 1=1
		AND item_qty_target_code = #{itemQtyTargetCode}
	</delete>
	
	<!-- 반납 or 모두사용 -->
	<update id="updateItemMgtIsDel" 
	parameterType="jin.mes.form.item.itemStockMgt.ItemStockMgtDto">
		UPDATE cm_item_mgt
		SET updator_id = #{updatorId},	
			updated_at = NOW()
			<if test="isDel != null">	
				,is_del = #{isDel}
			</if>
		WHERE item_mgt_id  = #{itemMgtId}
	</update>
</mapper>